[{"D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\index.js":"1","D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\App.js":"2","D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\components\\Calculator.js":"3","D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\components\\DigitButton.js":"4","D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\components\\OperationButton.js":"5"},{"size":234,"mtime":1658400983707,"results":"6","hashOfConfig":"7"},{"size":131,"mtime":1658400977193,"results":"8","hashOfConfig":"7"},{"size":5054,"mtime":1658993040185,"results":"9","hashOfConfig":"7"},{"size":211,"mtime":1658670796849,"results":"10","hashOfConfig":"7"},{"size":292,"mtime":1658671736066,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1331yeq",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\index.js",[],[],"D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\App.js",[],[],"D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\components\\Calculator.js",["28","29"],[],"import { useReducer } from \"react\"\r\nimport DigitButton from \"./DigitButton\"\r\nimport OperationButton from \"./OperationButton\"\r\nimport \"../styles/Calculator.css\"\r\n\r\nexport const ACTIONS = {\r\n  ADD_DIGIT: \"add-digit\",\r\n  CHOOSE_OPERATION: \"choose-operation\",\r\n  CLEAR: \"clear\",\r\n  DELETE_DIGIT: \"delete-digit\",\r\n  EVALUATE: \"evaluate\",\r\n}\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case ACTIONS.ADD_DIGIT:\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          currentOperand: payload.digit,\r\n          overwrite: false,\r\n        }\r\n      }\r\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\r\n        return state\r\n      }\r\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\r\n        return state\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\r\n      }\r\n    case ACTIONS.CHOOSE_OPERATION:\r\n      if (state.currentOperand == null && state.previousOperand == null) {\r\n        return state\r\n      }\r\n\r\n      if (state.currentOperand == null) {\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n        }\r\n      }\r\n\r\n      if (state.previousOperand == null) {\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n          previousOperand: state.currentOperand,\r\n          currentOperand: null,\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        previousOperand: evaluate(state),\r\n        operation: payload.operation,\r\n        currentOperand: null,\r\n      }\r\n    case ACTIONS.CLEAR:\r\n      return {}\r\n    case ACTIONS.DELETE_DIGIT:\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          overwrite: false,\r\n          currentOperand: null,\r\n        }\r\n      }\r\n      if (state.currentOperand == null) return state\r\n      if (state.currentOperand.length === 1) {\r\n        return { ...state, currentOperand: null }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        currentOperand: state.currentOperand.slice(0, -1),\r\n      }\r\n    case ACTIONS.EVALUATE:\r\n      if (\r\n        state.operation == null ||\r\n        state.currentOperand == null ||\r\n        state.previousOperand == null\r\n      ) {\r\n        return state\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        overwrite: true,\r\n        previousOperand: null,\r\n        operation: null,\r\n        currentOperand: evaluate(state),\r\n      }\r\n  }\r\n}\r\n\r\nfunction evaluate({ currentOperand, previousOperand, operation }) {\r\n  const prev = parseFloat(previousOperand)\r\n  const current = parseFloat(currentOperand)\r\n  if (isNaN(prev) || isNaN(current)) return \"\"\r\n  let computation = \"\"\r\n  switch (operation) {\r\n    case \"+\":\r\n      computation = prev + current\r\n      break\r\n    case \"-\":\r\n      computation = prev - current\r\n      break\r\n    case \"*\":\r\n      computation = prev * current\r\n      break\r\n    case \"รท\":\r\n      computation = prev / current\r\n      break\r\n  }\r\n\r\n  return computation.toString()\r\n}\r\n\r\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\r\n  maximumFractionDigits: 0,\r\n})\r\nfunction formatOperand(operand) {\r\n  if (operand == null) return\r\n  const [integer, decimal] = operand.split(\".\")\r\n  if (decimal == null) return INTEGER_FORMATTER.format(integer)\r\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\r\n}\r\n\r\nfunction Calculator() {\r\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\r\n    reducer,\r\n    {}\r\n  )\r\n\r\n  return (\r\n    <div className=\"calculator-grid\">\r\n      <div className=\"output\">\r\n        <div className=\"previous-operand\">\r\n          {formatOperand(previousOperand)} {operation}\r\n        </div>\r\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\r\n      </div>\r\n      <button\r\n        className=\"span-two\"\r\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\r\n      >\r\n        AC\r\n      </button>\r\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>\r\n        DEL\r\n      </button>\r\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\r\n      <DigitButton digit=\"1\" dispatch={dispatch} />\r\n      <DigitButton digit=\"2\" dispatch={dispatch} />\r\n      <DigitButton digit=\"3\" dispatch={dispatch} />\r\n      <OperationButton operation=\"*\" dispatch={dispatch} />\r\n      <DigitButton digit=\"4\" dispatch={dispatch} />\r\n      <DigitButton digit=\"5\" dispatch={dispatch} />\r\n      <DigitButton digit=\"6\" dispatch={dispatch} />\r\n      <OperationButton operation=\"+\" dispatch={dispatch} />\r\n      <DigitButton digit=\"7\" dispatch={dispatch} />\r\n      <DigitButton digit=\"8\" dispatch={dispatch} />\r\n      <DigitButton digit=\"9\" dispatch={dispatch} />\r\n      <OperationButton operation=\"-\" dispatch={dispatch} />\r\n      <DigitButton digit=\".\" dispatch={dispatch} />\r\n      <DigitButton digit=\"0\" dispatch={dispatch} />\r\n      <button\r\n        className=\"span-two\"\r\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\r\n      >\r\n        =\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Calculator","D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\components\\DigitButton.js",[],[],"D:\\Projects\\Small Ones\\REACT JS\\calculator\\src\\components\\OperationButton.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":15,"column":3,"nodeType":"32","messageId":"33","endLine":97,"endColumn":4},{"ruleId":"30","severity":1,"message":"31","line":105,"column":3,"nodeType":"32","messageId":"33","endLine":118,"endColumn":4},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]